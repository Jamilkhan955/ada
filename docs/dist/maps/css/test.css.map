{"version":3,"sources":["webpack:///./docs/src/scss/common/layout.scss","webpack:///./docs/src/scss/test.scss","webpack:///./docs/src/sprites/sprites.scss"],"names":[],"mappings":"AAEA,MACI,oBAAqB,CACxB,EAGG,SAAS,UACC,qBACY,CACzB,KAGG,eAAe,4GACwG,uCAC/E,CAC3C,EAGG,oBAAqB,CACxB,IAGG,WAAY,CACf,WAGG,WAAW,mBACK,cACF,gBACC,CAClB,KC5BG,kBAAmB,CADvB,UAIQ,yCAAoC,aACxB,aACC,CANrB,WAUQ,qDAAa,WACF,yCAC0B,aACzB,aACC,CAdrB,gBC6EE,+CALA,wBArDwB,WAAO,WAAO,CDAnC","file":"css/test.css","sourcesContent":["@import \"../../sprites/sprites.scss\";\n\n.icon {\n    background-size: 200%;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: 40PX;\n    font-family: \"PingFang SC\", miui, system-ui, -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", Helvetica, sans-serif;\n    -webkit-tap-highlight-color: transparent;\n}\n\na {\n    text-decoration: none;\n}\n\nimg {\n    border: none;\n}\n\n.main-wrap {\n    width: 100%;\n    max-width: 750px;\n    margin: 0 auto;\n    padding: 0 30px;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./docs/src/scss/common/layout.scss","@import \"common/layout.scss\";\n\nbody {\n    background: #f0f0f0;\n\n    .big {\n        background: url(\"../images/big.png\");\n        width: 300px;\n        height: 300px;\n    }\n\n    .logo {\n        display: flex;\n        color: #fff;\n        background: url(\"../images/logo.png\");\n        width: 100px;\n        height: 100px;\n    }\n\n    .icon-logo {\n        @include sprite($logo);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./docs/src/scss/test.scss","// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$logo-name: 'logo';\n$logo-x: 0px;\n$logo-y: 0px;\n$logo-offset-x: 0px;\n$logo-offset-y: 0px;\n$logo-width: 240px;\n$logo-height: 240px;\n$logo-total-width: 488px;\n$logo-total-height: 240px;\n$logo-image: '../sprites/sprites.png';\n$logo: (0px, 0px, 0px, 0px, 240px, 240px, 488px, 240px, '../sprites/sprites.png', 'logo', );\n$logo2-name: 'logo2';\n$logo2-x: 248px;\n$logo2-y: 0px;\n$logo2-offset-x: -248px;\n$logo2-offset-y: 0px;\n$logo2-width: 240px;\n$logo2-height: 240px;\n$logo2-total-width: 488px;\n$logo2-total-height: 240px;\n$logo2-image: '../sprites/sprites.png';\n$logo2: (248px, 0px, -248px, 0px, 240px, 240px, 488px, 240px, '../sprites/sprites.png', 'logo2', );\n$spritesheet-width: 488px;\n$spritesheet-height: 240px;\n$spritesheet-image: '../sprites/sprites.png';\n$spritesheet-sprites: ($logo, $logo2, );\n$spritesheet: (488px, 240px, '../sprites/sprites.png', $spritesheet-sprites, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./docs/src/sprites/sprites.scss"],"sourceRoot":""}